# This workflow builds the UKL Kernel from Scratch, Boots it in QEMU, and runs unit tests

name: "UKL CLONE REPOS 2"
description: "Clones all UKL Dependency Repos"

inputs:
  ukl_token:
    description: "Token Needed to Access Private UKL Dependency Repos"
    required: true
    
runs:
  using: "composite"
  steps:
  
    #Checkout UKL/Linux repo - branch 5.14      
    - name: checkout Linux UKL Repo
      uses: actions/checkout@v2
      with:
        path: linux
    
    # Checks-out Makefile from UKL repo
    - name: Checkout MakeFile
      uses: actions/checkout@v2
      with:
        repository: whunt1965/ukl
        token: ${{ inputs.ukl_token }}
        ref: terminate-qemu
        path: ukl
    
    #Copy the Linux Directory into the UKL directory
    - name: Copy Linux dir into ukl dir
      shell: bash
      run: |
        mv /home/runner/work/linux/linux/linux ukl/
        cd ukl
    
    #Checkout Linux-Configs repo
    - name: checkout config file
      uses: actions/checkout@v2
      with:
        repository: whunt1965/Linux-Configs
        ref: master
        token: ${{ inputs.ukl_token }}
        path: ukl/Linux-Configs
            
            
    #Checkout gcc repo - branch releases/gcc-9.3.0     
    - name: checkout GCC repo
      uses: actions/checkout@v2
      with:
          repository: gcc-mirror/gcc
          ref: releases/gcc-9.3.0
          path: ukl/gcc
            
    #Checkout UKL/glibc repo - branch ukl   
    - name: checkout glibc repo
      uses: actions/checkout@v2
      with:
          repository: unikernelLinux/glibc
          ref: ukl
          token: ${{ inputs.ukl_token }}
          path: ukl/glibc
            
    #Checkout min-initrd repo - branch ukl   
    - name: checkout min-initrd repo
      uses: actions/checkout@v2
      with:
          repository: whunt1965/min-initrd
          ref: qemu-terminate
          token: ${{ inputs.ukl_token }}
          path: ukl/min-initrd

    # Installs required packages for build
    - name: Update and install package requirements
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install git build-essential flex bison supermin libelf-dev libssl-dev texinfo libgmp3-dev libmpc-dev libmpfr-dev qemu-kvm
      
